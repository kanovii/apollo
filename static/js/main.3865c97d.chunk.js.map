{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/Detail.js","components/App.js","apollo.js","index.js"],"names":["Movie","id","title","medium_cover_image","rating","console","log","className","to","src","movieQuery","gql","Home","useQuery","loading","error","data","movies","map","m","movieQueryy","Detail","useParams","variables","movie","App","exact","path","component","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"uSAkBeA,EAdD,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,GAAIC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,mBAAoBC,EAAY,EAAZA,OAG3C,OADAC,QAAQC,IAAIH,GAER,qBAAKI,UAAU,YAAf,SACI,eAAC,IAAD,CAAMC,GAAE,WAAMP,GAAd,UACI,qBAAKM,UAAU,YAAYE,IAAKN,IAChC,sBAAKI,UAAU,cAAf,UAA8BL,EAA9B,IAAqC,4CAAeE,cCP9DM,EAAaC,YAAH,uKA0CDC,EAhCF,WACT,MAAiCC,YAASH,GAAlCI,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGhB,OAFRX,QAAQC,IAAIQ,EAASC,EAAOC,GAGhB,sBAAKT,UAAU,YAAf,UACI,sBAAKA,UAAU,aAAf,UACI,yCACA,yDAEJ,qBAAKA,UAAU,eAAf,SACI,qBAAKA,UAAU,mBAAf,SACKO,EACG,6CAEAE,EAAKC,OAAOC,KAAI,SAAAC,GAAC,OACjB,cAAC,EAAD,CACIlB,GAAIkB,EAAElB,GACNC,MAAOiB,EAAEjB,MACTC,mBAAoBgB,EAAEhB,mBACtBC,OAAQe,EAAEf,QACLe,EAAElB,eC/BrCmB,EAAcT,YAAH,kMAiCFU,EAvBA,WACX,IAAQpB,EAAOqB,cAAPrB,GACR,EAAgCY,YAASO,EAAa,CAClDG,UAAW,CAAEtB,IAAKA,KADfa,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAIvB,OADAX,QAAQC,IAAIQ,EAASC,EAAOC,GAExB,8BACKF,EACG,6CAEA,qCACA,8BAAMb,IACN,qBAAKQ,IAAKO,EAAKQ,MAAMrB,qBACrB,8BAAMa,EAAKQ,MAAMtB,cCflBuB,MATf,WACE,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhB,IACjC,cAAC,IAAD,CAAOe,KAAK,OAAOC,UAAWP,Q,gBCDrBQ,EALA,IAAIC,IAAa,CAC5BC,IAAI,gDACJC,MAAO,IAAIC,M,QCGfC,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBP,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFQ,SAASC,eAAe,W","file":"static/js/main.3865c97d.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport \"./Movie.css\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Movie = ({id, title, medium_cover_image, rating}) => {\r\n    \r\n    console.log(medium_cover_image)\r\n    return (\r\n        <div className=\"movie_box\">\r\n            <Link to={`/${id}`}>\r\n                <img className=\"movie_img\" src={medium_cover_image} />  \r\n                <div className=\"movie_title\">{title} <span>rating: {rating}</span></div>\r\n \r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Movie","import * as React from \"react\";\r\nimport \"./Home.css\"\r\nimport { gql, useQuery } from \"@apollo/client\"\r\nimport Movie from \"../components/Movie\";\r\nconst movieQuery = gql `\r\n    query {\r\n        movies{\r\n            id\r\n            rating\r\n            title\r\n            medium_cover_image\r\n        }    \r\n    }\r\n`\r\nconst Home = () => {\r\n    const { loading, error, data } = useQuery(movieQuery);\r\n    console.log(loading, error, data)\r\n\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"header_box\">\r\n                        <div>movies</div>\r\n                        <div>find movie you want</div>\r\n                    </div>\r\n                    <div className=\"at_container\">\r\n                        <div className=\"movies_container\">\r\n                            {loading ? \r\n                                <div>loading...</div> \r\n                                : \r\n                                data.movies.map(m => \r\n                                <Movie \r\n                                    id={m.id} \r\n                                    title={m.title} \r\n                                    medium_cover_image={m.medium_cover_image}\r\n                                    rating={m.rating}\r\n                                    key={m.id} \r\n                                />)\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n\r\n\r\n}\r\n\r\nexport default Home;","import * as React from \"react\";\r\nimport { gql, useQuery } from \"@apollo/client\"\r\nimport { useParams } from \"react-router\";\r\n\r\nconst movieQueryy = gql`\r\n    query movieQuery($id: Int!) {\r\n        movie(id: $id) {\r\n            id\r\n            rating\r\n            title\r\n            medium_cover_image\r\n        }\r\n    }\r\n`\r\nconst Detail = () => {\r\n    const { id } = useParams()\r\n    const {loading, error, data } = useQuery(movieQueryy, {\r\n        variables: { id: +id }\r\n    });\r\n    console.log(loading, error, data)\r\n    return (\r\n        <div>\r\n            {loading ? \r\n                <div>loading...</div>\r\n                :\r\n                <>\r\n                <div>{id}</div>\r\n                <img src={data.movie.medium_cover_image} />\r\n                <div>{data.movie.title}</div>\r\n                \r\n                </>\r\n            \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Detail;","import './App.css';\nimport {HashRouter as Router, Route} from \"react-router-dom\";\nimport Home from \"../routes/Home\"\nimport Detail from \"../routes/Detail\"\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\" component={Home}></Route>\n      <Route path=\"/:id\" component={Detail}></Route>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ApolloClient, InMemoryCache } from \"@apollo/client\"\r\n\r\nconst client = new ApolloClient({\r\n    uri:\"https://graphql-movie-api-2021.herokuapp.com/\",\r\n    cache: new InMemoryCache()\r\n})\r\n\r\nexport default client","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport client from \"./apollo\";\nimport { ApolloProvider } from \"@apollo/client\";\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App /> \n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}